Processing files: ./SpecializeVLArray.3d
Processing file: ./SpecializeVLArray.3d
Module name: SpecializeVLArray
=============After parsing=============
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
typedef UINT16 USHORT;
/*------------------------------------*/
typedef UINT8 UNINTERPRETED;
/*------------------------------------*/
[aligned] typedef struct _UNKNOWN_HEADER_64 {
USHORT NameLength;
USHORT RawValueLength;
(pointer  UNINTERPRETED (false UINT64)) pName;
(pointer  UNINTERPRETED (false UINT64)) pRawValue; 
} UNKNOWN_HEADER_64, *
/*------------------------------------*/
typedef struct _UNKNOWN_HEADERS_INTERNAL_64(USHORT UnknownHeaderCount) {
UNKNOWN_HEADER_64 UnknownHeaders[:byte-size ((sizeof UNKNOWN_HEADER_64) * UnknownHeaderCount)]; 
} UNKNOWN_HEADERS_INTERNAL_64, *
/*------------------------------------*/
typedef struct _UNKNOWN_HEADERS_64(USHORT UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
(pointer  UNKNOWN_HEADERS_INTERNAL_64(UnknownHeaderCount) (true UINT64)) pUnknownHeaders probe (destination=UnknownHeaderProbe, probe_ptr_as_u64=, probe_init=) { (Probe_action_copy ProbeAndCopy(((sizeof UNKNOWN_HEADER_64) * UnknownHeaderCount))); }; 
} UNKNOWN_HEADERS_64, *
/*------------------------------------*/
specialize (pointer(UINT64), pointer(UINT32)) UNKNOWN_HEADERS_64 UNKNOWN_HEADERS_32
/*------------------------------------*/
[entrypoint] casetype _UNKNOWN_HEADERS(Bool Requestor32, USHORT UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
switch (Requestor32) {

                  case true: UNKNOWN_HEADERS_32(UnknownHeaderCount, UnknownHeaderProbe) pUnknownHeaders32;;
case false: UNKNOWN_HEADERS_64(UnknownHeaderCount, UnknownHeaderProbe) pUnknownHeaders64;;
} 
} UNKNOWN_HEADERS, *
=============After desugaring=============
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
typedef UINT16 SpecializeVLArray.USHORT;
/*------------------------------------*/
typedef UINT8 SpecializeVLArray.UNINTERPRETED;
/*------------------------------------*/
[aligned] typedef struct SpecializeVLArray._UNKNOWN_HEADER_64 {
SpecializeVLArray.USHORT NameLength;
SpecializeVLArray.USHORT RawValueLength;
(pointer  SpecializeVLArray.UNINTERPRETED (false UINT64)) pName;
(pointer  SpecializeVLArray.UNINTERPRETED (false UINT64)) pRawValue; 
} SpecializeVLArray.UNKNOWN_HEADER_64, *
/*------------------------------------*/
typedef struct SpecializeVLArray._UNKNOWN_HEADERS_INTERNAL_64(SpecializeVLArray.USHORT UnknownHeaderCount) {
SpecializeVLArray.UNKNOWN_HEADER_64 UnknownHeaders[:byte-size ((sizeof SpecializeVLArray.UNKNOWN_HEADER_64) * UnknownHeaderCount)]; 
} SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64, *
/*------------------------------------*/
typedef struct SpecializeVLArray._UNKNOWN_HEADERS_64(SpecializeVLArray.USHORT UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
(pointer  SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64(UnknownHeaderCount) (true UINT64)) pUnknownHeaders probe (destination=UnknownHeaderProbe, probe_ptr_as_u64=, probe_init=) { (Probe_action_copy SpecializeVLArray.ProbeAndCopy(((sizeof SpecializeVLArray.UNKNOWN_HEADER_64) * UnknownHeaderCount))); }; 
} SpecializeVLArray.UNKNOWN_HEADERS_64, *
/*------------------------------------*/
specialize (pointer(UINT64), pointer(UINT32)) SpecializeVLArray.UNKNOWN_HEADERS_64 SpecializeVLArray.UNKNOWN_HEADERS_32
/*------------------------------------*/
[entrypoint] casetype SpecializeVLArray._UNKNOWN_HEADERS(Bool Requestor32, SpecializeVLArray.USHORT UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
switch (Requestor32) {

                  case true: SpecializeVLArray.UNKNOWN_HEADERS_32(UnknownHeaderCount, UnknownHeaderProbe) pUnknownHeaders32;;
case false: SpecializeVLArray.UNKNOWN_HEADERS_64(UnknownHeaderCount, UnknownHeaderProbe) pUnknownHeaders64;;
} 
} SpecializeVLArray.UNKNOWN_HEADERS, *
=============After binding (1) =============
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
typedef UINT16 SpecializeVLArray.USHORT;
/*------------------------------------*/
typedef UINT8 SpecializeVLArray.UNINTERPRETED;
/*------------------------------------*/
[aligned] typedef struct SpecializeVLArray._UNKNOWN_HEADER_64 {
SpecializeVLArray.USHORT NameLength;
SpecializeVLArray.USHORT RawValueLength;
(pointer  SpecializeVLArray.UNINTERPRETED (false UINT64)) pName;
(pointer  SpecializeVLArray.UNINTERPRETED (false UINT64)) pRawValue; 
} SpecializeVLArray.UNKNOWN_HEADER_64, *
/*------------------------------------*/
typedef struct SpecializeVLArray._UNKNOWN_HEADERS_INTERNAL_64(SpecializeVLArray.USHORT UnknownHeaderCount) {
SpecializeVLArray.UNKNOWN_HEADER_64 UnknownHeaders[:byte-size ((sizeof SpecializeVLArray.UNKNOWN_HEADER_64) * (UINT32) UnknownHeaderCount)]; 
} SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64, *
/*------------------------------------*/
typedef struct SpecializeVLArray._UNKNOWN_HEADERS_64(SpecializeVLArray.USHORT UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
(pointer  SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64(UnknownHeaderCount) (true UINT64)) pUnknownHeaders probe (destination=UnknownHeaderProbe, probe_ptr_as_u64=as_u64_identity, probe_init=SpecializeVLArray.ProbeInit) { (Probe_action_copy SpecializeVLArray.ProbeAndCopy((UINT64) ((sizeof SpecializeVLArray.UNKNOWN_HEADER_64) * (UINT32) UnknownHeaderCount))); }; 
} SpecializeVLArray.UNKNOWN_HEADERS_64, *
/*------------------------------------*/
specialize (pointer(UINT64), pointer(UINT32)) SpecializeVLArray.UNKNOWN_HEADERS_64 SpecializeVLArray.UNKNOWN_HEADERS_32
/*------------------------------------*/
[entrypoint] casetype SpecializeVLArray._UNKNOWN_HEADERS(Bool Requestor32, SpecializeVLArray.USHORT UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
switch (Requestor32) {

                  case true: SpecializeVLArray.UNKNOWN_HEADERS_32(UnknownHeaderCount, UnknownHeaderProbe) pUnknownHeaders32;;
case false: SpecializeVLArray.UNKNOWN_HEADERS_64(UnknownHeaderCount, UnknownHeaderProbe) pUnknownHeaders64;;
} 
} SpecializeVLArray.UNKNOWN_HEADERS, *
Probes needed for: UINT8, UINT16, UNKNOWN_HEADER_64, UNKNOWN_HEADERS_INTERNAL_64
Should generalize: UNKNOWN_HEADERS_64
=============After generate probe functions=============
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
typedef UINT16 SpecializeVLArray.USHORT;
/*------------------------------------*/
typedef UINT8 SpecializeVLArray.UNINTERPRETED;
/*------------------------------------*/
[aligned] typedef struct SpecializeVLArray._UNKNOWN_HEADER_64 {
SpecializeVLArray.USHORT NameLength;
SpecializeVLArray.USHORT RawValueLength;
(pointer  SpecializeVLArray.UNINTERPRETED (false UINT64)) pName;
(pointer  SpecializeVLArray.UNINTERPRETED (false UINT64)) pRawValue; 
} SpecializeVLArray.UNKNOWN_HEADER_64, *
/*------------------------------------*/
stub probe SpecializeVLArray.___probe_UNKNOWN_HEADER_64() (for SpecializeVLArray.UNKNOWN_HEADER_64 -> SpecializeVLArray.UNKNOWN_HEADER_64)
/*------------------------------------*/
typedef struct SpecializeVLArray._UNKNOWN_HEADERS_INTERNAL_64(SpecializeVLArray.USHORT UnknownHeaderCount) {
SpecializeVLArray.UNKNOWN_HEADER_64 UnknownHeaders[:byte-size ((sizeof SpecializeVLArray.UNKNOWN_HEADER_64) * (UINT32) UnknownHeaderCount)]; 
} SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64, *
/*------------------------------------*/
stub probe SpecializeVLArray.___probe_UNKNOWN_HEADERS_INTERNAL_64((SpecializeVLArray.USHORT UnknownHeaderCount)) (for SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64 -> SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64)
/*------------------------------------*/
typedef struct SpecializeVLArray._UNKNOWN_HEADERS_64(SpecializeVLArray.USHORT UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
(pointer  SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64(UnknownHeaderCount) (true UINT64)) pUnknownHeaders probe (destination=UnknownHeaderProbe, probe_ptr_as_u64=as_u64_identity, probe_init=SpecializeVLArray.ProbeInit) { (Probe_action_copy SpecializeVLArray.ProbeAndCopy((UINT64) ((sizeof SpecializeVLArray.UNKNOWN_HEADER_64) * (UINT32) UnknownHeaderCount))); }; 
} SpecializeVLArray.UNKNOWN_HEADERS_64, *
/*------------------------------------*/
specialize (pointer(UINT64), pointer(UINT32)) SpecializeVLArray.UNKNOWN_HEADERS_64 SpecializeVLArray.UNKNOWN_HEADERS_32
/*------------------------------------*/
[entrypoint] casetype SpecializeVLArray._UNKNOWN_HEADERS(Bool Requestor32, SpecializeVLArray.USHORT UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
switch (Requestor32) {

                  case true: SpecializeVLArray.UNKNOWN_HEADERS_32(UnknownHeaderCount, UnknownHeaderProbe) pUnknownHeaders32;;
case false: SpecializeVLArray.UNKNOWN_HEADERS_64(UnknownHeaderCount, UnknownHeaderProbe) pUnknownHeaders64;;
} 
} SpecializeVLArray.UNKNOWN_HEADERS, *
**************************Instantiations with signature <(___probe_pUnknownHeaders : (SpecializeVLArray.USHORT -> probe_m_unit) probe for SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64)> for fields: (pointer  SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64(UnknownHeaderCount) (true UINT64)) pUnknownHeaders probe (destination=UnknownHeaderProbe, probe_ptr_as_u64=as_u64_identity, probe_init=SpecializeVLArray.ProbeInit) { (Probe_action_var (probe-fun ___probe_pUnknownHeaders UnknownHeaderCount)) };
Instantiations: ___probe__UNKNOWN_HEADERS_64_0 -> SpecializeVLArray.___probe_UNKNOWN_HEADERS_INTERNAL_64
=============After probe generalization=============
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
typedef UINT16 SpecializeVLArray.USHORT;
/*------------------------------------*/
typedef UINT8 SpecializeVLArray.UNINTERPRETED;
/*------------------------------------*/
[aligned] typedef struct SpecializeVLArray._UNKNOWN_HEADER_64 {
SpecializeVLArray.USHORT NameLength;
SpecializeVLArray.USHORT RawValueLength;
(pointer  SpecializeVLArray.UNINTERPRETED (false UINT64)) pName;
(pointer  SpecializeVLArray.UNINTERPRETED (false UINT64)) pRawValue; 
} SpecializeVLArray.UNKNOWN_HEADER_64, *
/*------------------------------------*/
stub probe SpecializeVLArray.___probe_UNKNOWN_HEADER_64() (for SpecializeVLArray.UNKNOWN_HEADER_64 -> SpecializeVLArray.UNKNOWN_HEADER_64)
/*------------------------------------*/
typedef struct SpecializeVLArray._UNKNOWN_HEADERS_INTERNAL_64(SpecializeVLArray.USHORT UnknownHeaderCount) {
SpecializeVLArray.UNKNOWN_HEADER_64 UnknownHeaders[:byte-size ((sizeof SpecializeVLArray.UNKNOWN_HEADER_64) * (UINT32) UnknownHeaderCount)]; 
} SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64, *
/*------------------------------------*/
stub probe SpecializeVLArray.___probe_UNKNOWN_HEADERS_INTERNAL_64((SpecializeVLArray.USHORT UnknownHeaderCount)) (for SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64 -> SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64)
/*------------------------------------*/
typedef struct SpecializeVLArray._UNKNOWN_HEADERS_64<(___probe_pUnknownHeaders : (SpecializeVLArray.USHORT -> probe_m_unit) probe for SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64)>(SpecializeVLArray.USHORT UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
(pointer  SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64(UnknownHeaderCount) (true UINT64)) pUnknownHeaders probe (destination=UnknownHeaderProbe, probe_ptr_as_u64=as_u64_identity, probe_init=SpecializeVLArray.ProbeInit) { (Probe_action_var (probe-fun ___probe_pUnknownHeaders UnknownHeaderCount)) }; 
} SpecializeVLArray.UNKNOWN_HEADERS_64, *
/*------------------------------------*/
specialize (pointer(UINT64), pointer(UINT32)) SpecializeVLArray.UNKNOWN_HEADERS_64 SpecializeVLArray.UNKNOWN_HEADERS_32
/*------------------------------------*/
[entrypoint] casetype SpecializeVLArray._UNKNOWN_HEADERS(Bool Requestor32, SpecializeVLArray.USHORT UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
switch (Requestor32) {

                  case true: SpecializeVLArray.UNKNOWN_HEADERS_32(UnknownHeaderCount, UnknownHeaderProbe) pUnknownHeaders32;;
case false: SpecializeVLArray.UNKNOWN_HEADERS_64<SpecializeVLArray.___probe_UNKNOWN_HEADERS_INTERNAL_64>(UnknownHeaderCount, UnknownHeaderProbe) pUnknownHeaders64;;
} 
} SpecializeVLArray.UNKNOWN_HEADERS, *
=============After generate 32-bit types=============
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
typedef UINT16 SpecializeVLArray.USHORT;
/*------------------------------------*/
typedef UINT8 SpecializeVLArray.UNINTERPRETED;
/*------------------------------------*/
[aligned] typedef struct SpecializeVLArray._UNKNOWN_HEADER_64 {
SpecializeVLArray.USHORT NameLength;
SpecializeVLArray.USHORT RawValueLength;
(pointer  SpecializeVLArray.UNINTERPRETED (false UINT64)) pName;
(pointer  SpecializeVLArray.UNINTERPRETED (false UINT64)) pRawValue; 
} SpecializeVLArray.UNKNOWN_HEADER_64, *
/*------------------------------------*/
[noextract, aligned] typedef struct SpecializeVLArray.___specialized32__UNKNOWN_HEADER_64 {
SpecializeVLArray.USHORT NameLength;
SpecializeVLArray.USHORT RawValueLength;
UINT32 pName;
UINT32 pRawValue; 
} SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64, *
/*------------------------------------*/
stub probe SpecializeVLArray.___probe_UNKNOWN_HEADER_64() (for SpecializeVLArray.UNKNOWN_HEADER_64 -> SpecializeVLArray.UNKNOWN_HEADER_64)
/*------------------------------------*/
stub probe SpecializeVLArray.___specialized32____probe_UNKNOWN_HEADER_64() (for SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64 -> SpecializeVLArray.UNKNOWN_HEADER_64)
/*------------------------------------*/
typedef struct SpecializeVLArray._UNKNOWN_HEADERS_INTERNAL_64(SpecializeVLArray.USHORT UnknownHeaderCount) {
SpecializeVLArray.UNKNOWN_HEADER_64 UnknownHeaders[:byte-size ((sizeof SpecializeVLArray.UNKNOWN_HEADER_64) * (UINT32) UnknownHeaderCount)]; 
} SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64, *
/*------------------------------------*/
[noextract] typedef struct SpecializeVLArray.___specialized32__UNKNOWN_HEADERS_INTERNAL_64(SpecializeVLArray.USHORT UnknownHeaderCount) {
SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64 UnknownHeaders[:byte-size ((sizeof SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64) * (UINT32) UnknownHeaderCount)]; 
} SpecializeVLArray.___specialized32_UNKNOWN_HEADERS_INTERNAL_64, *
/*------------------------------------*/
stub probe SpecializeVLArray.___probe_UNKNOWN_HEADERS_INTERNAL_64((SpecializeVLArray.USHORT UnknownHeaderCount)) (for SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64 -> SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64)
/*------------------------------------*/
stub probe SpecializeVLArray.___specialized32____probe_UNKNOWN_HEADERS_INTERNAL_64((SpecializeVLArray.USHORT UnknownHeaderCount)) (for SpecializeVLArray.___specialized32_UNKNOWN_HEADERS_INTERNAL_64 -> SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64)
/*------------------------------------*/
typedef struct SpecializeVLArray._UNKNOWN_HEADERS_64<(___probe_pUnknownHeaders : (SpecializeVLArray.USHORT -> probe_m_unit) probe for SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64)>(SpecializeVLArray.USHORT UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
(pointer  SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64(UnknownHeaderCount) (true UINT64)) pUnknownHeaders probe (destination=UnknownHeaderProbe, probe_ptr_as_u64=as_u64_identity, probe_init=SpecializeVLArray.ProbeInit) { (Probe_action_var (probe-fun ___probe_pUnknownHeaders UnknownHeaderCount)) }; 
} SpecializeVLArray.UNKNOWN_HEADERS_64, *
/*------------------------------------*/
specialize (pointer(UINT64), pointer(UINT32)) SpecializeVLArray.UNKNOWN_HEADERS_64 SpecializeVLArray.UNKNOWN_HEADERS_32
/*------------------------------------*/
[entrypoint] casetype SpecializeVLArray._UNKNOWN_HEADERS(Bool Requestor32, SpecializeVLArray.USHORT UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
switch (Requestor32) {

                  case true: SpecializeVLArray.UNKNOWN_HEADERS_32(UnknownHeaderCount, UnknownHeaderProbe) pUnknownHeaders32;;
case false: SpecializeVLArray.UNKNOWN_HEADERS_64<SpecializeVLArray.___probe_UNKNOWN_HEADERS_INTERNAL_64>(UnknownHeaderCount, UnknownHeaderProbe) pUnknownHeaders64;;
} 
} SpecializeVLArray.UNKNOWN_HEADERS, *
=============After specialization=============
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
typedef UINT16 SpecializeVLArray.USHORT;
/*------------------------------------*/
typedef UINT8 SpecializeVLArray.UNINTERPRETED;
/*------------------------------------*/
[aligned] typedef struct SpecializeVLArray._UNKNOWN_HEADER_64 {
SpecializeVLArray.USHORT NameLength;
SpecializeVLArray.USHORT RawValueLength;
(pointer  SpecializeVLArray.UNINTERPRETED (false UINT64)) pName;
(pointer  SpecializeVLArray.UNINTERPRETED (false UINT64)) pRawValue; 
} SpecializeVLArray.UNKNOWN_HEADER_64, *
/*------------------------------------*/
[noextract, aligned] typedef struct SpecializeVLArray.___specialized32__UNKNOWN_HEADER_64 {
SpecializeVLArray.USHORT NameLength;
SpecializeVLArray.USHORT RawValueLength;
UINT32 pName;
UINT32 pRawValue; 
} SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64, *
/*------------------------------------*/
stub probe SpecializeVLArray.___probe_UNKNOWN_HEADER_64() (for SpecializeVLArray.UNKNOWN_HEADER_64 -> SpecializeVLArray.UNKNOWN_HEADER_64)
/*------------------------------------*/
stub probe SpecializeVLArray.___specialized32____probe_UNKNOWN_HEADER_64() (for SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64 -> SpecializeVLArray.UNKNOWN_HEADER_64)
/*------------------------------------*/
typedef struct SpecializeVLArray._UNKNOWN_HEADERS_INTERNAL_64(SpecializeVLArray.USHORT UnknownHeaderCount) {
SpecializeVLArray.UNKNOWN_HEADER_64 UnknownHeaders[:byte-size ((sizeof SpecializeVLArray.UNKNOWN_HEADER_64) * (UINT32) UnknownHeaderCount)]; 
} SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64, *
/*------------------------------------*/
[noextract] typedef struct SpecializeVLArray.___specialized32__UNKNOWN_HEADERS_INTERNAL_64(SpecializeVLArray.USHORT UnknownHeaderCount) {
SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64 UnknownHeaders[:byte-size ((sizeof SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64) * (UINT32) UnknownHeaderCount)]; 
} SpecializeVLArray.___specialized32_UNKNOWN_HEADERS_INTERNAL_64, *
/*------------------------------------*/
stub probe SpecializeVLArray.___probe_UNKNOWN_HEADERS_INTERNAL_64((SpecializeVLArray.USHORT UnknownHeaderCount)) (for SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64 -> SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64)
/*------------------------------------*/
stub probe SpecializeVLArray.___specialized32____probe_UNKNOWN_HEADERS_INTERNAL_64((SpecializeVLArray.USHORT UnknownHeaderCount)) (for SpecializeVLArray.___specialized32_UNKNOWN_HEADERS_INTERNAL_64 -> SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64)
/*------------------------------------*/
typedef struct SpecializeVLArray._UNKNOWN_HEADERS_64<(___probe_pUnknownHeaders : (SpecializeVLArray.USHORT -> probe_m_unit) probe for SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64)>(SpecializeVLArray.USHORT UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
(pointer  SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64(UnknownHeaderCount) (true UINT64)) pUnknownHeaders probe (destination=UnknownHeaderProbe, probe_ptr_as_u64=as_u64_identity, probe_init=SpecializeVLArray.ProbeInit) { (Probe_action_var (probe-fun ___probe_pUnknownHeaders UnknownHeaderCount)) }; 
} SpecializeVLArray.UNKNOWN_HEADERS_64, *
/*------------------------------------*/
typedef struct SpecializeVLArray.___specialized_UNKNOWN_HEADERS_32(SpecializeVLArray.USHORT UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
(pointer  SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64(UnknownHeaderCount) (true UINT64)) pUnknownHeaders probe (destination=UnknownHeaderProbe, probe_ptr_as_u64=as_u64_identity, probe_init=SpecializeVLArray.ProbeInit) { (Probe_action_var (probe-fun SpecializeVLArray.___specialized32____probe_UNKNOWN_HEADERS_INTERNAL_64 UnknownHeaderCount)) }; 
} SpecializeVLArray.UNKNOWN_HEADERS_32, *
/*------------------------------------*/
[entrypoint] casetype SpecializeVLArray._UNKNOWN_HEADERS(Bool Requestor32, SpecializeVLArray.USHORT UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
switch (Requestor32) {

                  case true: SpecializeVLArray.UNKNOWN_HEADERS_32(UnknownHeaderCount, UnknownHeaderProbe) pUnknownHeaders32;;
case false: SpecializeVLArray.UNKNOWN_HEADERS_64<SpecializeVLArray.___probe_UNKNOWN_HEADERS_INTERNAL_64>(UnknownHeaderCount, UnknownHeaderProbe) pUnknownHeaders64;;
} 
} SpecializeVLArray.UNKNOWN_HEADERS, *
=============After binding=============
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
typedef UINT16 SpecializeVLArray.USHORT;
/*------------------------------------*/
typedef UINT8 SpecializeVLArray.UNINTERPRETED;
/*------------------------------------*/
[aligned] typedef struct SpecializeVLArray._UNKNOWN_HEADER_64 {
SpecializeVLArray.USHORT NameLength;
SpecializeVLArray.USHORT RawValueLength;
(pointer  SpecializeVLArray.UNINTERPRETED (false UINT64)) pName;
(pointer  SpecializeVLArray.UNINTERPRETED (false UINT64)) pRawValue; 
} SpecializeVLArray.UNKNOWN_HEADER_64, *
/*------------------------------------*/
[noextract, aligned] typedef struct SpecializeVLArray.___specialized32__UNKNOWN_HEADER_64 {
SpecializeVLArray.USHORT NameLength;
SpecializeVLArray.USHORT RawValueLength;
UINT32 pName;
UINT32 pRawValue; 
} SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64, *
/*------------------------------------*/
stub probe SpecializeVLArray.___probe_UNKNOWN_HEADER_64() (for SpecializeVLArray.UNKNOWN_HEADER_64 -> SpecializeVLArray.UNKNOWN_HEADER_64)
/*------------------------------------*/
stub probe SpecializeVLArray.___specialized32____probe_UNKNOWN_HEADER_64() (for SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64 -> SpecializeVLArray.UNKNOWN_HEADER_64)
/*------------------------------------*/
typedef struct SpecializeVLArray._UNKNOWN_HEADERS_INTERNAL_64(SpecializeVLArray.USHORT UnknownHeaderCount) {
SpecializeVLArray.UNKNOWN_HEADER_64 UnknownHeaders[:byte-size ((sizeof SpecializeVLArray.UNKNOWN_HEADER_64) * (UINT32) UnknownHeaderCount)]; 
} SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64, *
/*------------------------------------*/
[noextract] typedef struct SpecializeVLArray.___specialized32__UNKNOWN_HEADERS_INTERNAL_64(SpecializeVLArray.USHORT UnknownHeaderCount) {
SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64 UnknownHeaders[:byte-size ((sizeof SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64) * (UINT32) UnknownHeaderCount)]; 
} SpecializeVLArray.___specialized32_UNKNOWN_HEADERS_INTERNAL_64, *
/*------------------------------------*/
stub probe SpecializeVLArray.___probe_UNKNOWN_HEADERS_INTERNAL_64((SpecializeVLArray.USHORT UnknownHeaderCount)) (for SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64 -> SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64)
/*------------------------------------*/
stub probe SpecializeVLArray.___specialized32____probe_UNKNOWN_HEADERS_INTERNAL_64((SpecializeVLArray.USHORT UnknownHeaderCount)) (for SpecializeVLArray.___specialized32_UNKNOWN_HEADERS_INTERNAL_64 -> SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64)
/*------------------------------------*/
typedef struct SpecializeVLArray._UNKNOWN_HEADERS_64<(___probe_pUnknownHeaders : (SpecializeVLArray.USHORT -> probe_m_unit) probe for SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64)>(SpecializeVLArray.USHORT UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
(pointer  SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64(UnknownHeaderCount) (true UINT64)) pUnknownHeaders probe (destination=UnknownHeaderProbe, probe_ptr_as_u64=as_u64_identity, probe_init=SpecializeVLArray.ProbeInit) { (Probe_action_var (probe-fun ___probe_pUnknownHeaders UnknownHeaderCount)) }; 
} SpecializeVLArray.UNKNOWN_HEADERS_64, *
/*------------------------------------*/
typedef struct SpecializeVLArray.___specialized_UNKNOWN_HEADERS_32(SpecializeVLArray.USHORT UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
(pointer  SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64(UnknownHeaderCount) (true UINT64)) pUnknownHeaders probe (destination=UnknownHeaderProbe, probe_ptr_as_u64=as_u64_identity, probe_init=SpecializeVLArray.ProbeInit) { (Probe_action_var (probe-fun SpecializeVLArray.___specialized32____probe_UNKNOWN_HEADERS_INTERNAL_64 UnknownHeaderCount)) }; 
} SpecializeVLArray.UNKNOWN_HEADERS_32, *
/*------------------------------------*/
[entrypoint] casetype SpecializeVLArray._UNKNOWN_HEADERS(Bool Requestor32, SpecializeVLArray.USHORT UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
switch (Requestor32) {

                  case true: SpecializeVLArray.UNKNOWN_HEADERS_32(UnknownHeaderCount, UnknownHeaderProbe) pUnknownHeaders32;;
case false: SpecializeVLArray.UNKNOWN_HEADERS_64<SpecializeVLArray.___probe_UNKNOWN_HEADERS_INTERNAL_64>(UnknownHeaderCount, UnknownHeaderProbe) pUnknownHeaders64;;
} 
} SpecializeVLArray.UNKNOWN_HEADERS, *
Bitfields: Field SpecializeVLArray.USHORT NameLength; has comments <>
Bitfields: Field SpecializeVLArray.USHORT RawValueLength; has comments <>
Bitfields: Field (pointer  SpecializeVLArray.UNINTERPRETED (false UINT64)) pName; has comments <>
Bitfields: Field (pointer  SpecializeVLArray.UNINTERPRETED (false UINT64)) pRawValue; has comments <>
Bitfields: Field SpecializeVLArray.USHORT NameLength; has comments <>
Bitfields: Field SpecializeVLArray.USHORT RawValueLength; has comments <>
Bitfields: Field UINT32 pName; has comments <>
Bitfields: Field UINT32 pRawValue; has comments <>
Bitfields: Field SpecializeVLArray.UNKNOWN_HEADER_64 UnknownHeaders[:byte-size ((sizeof SpecializeVLArray.UNKNOWN_HEADER_64) * (UINT32) UnknownHeaderCount)]; has comments <>
Bitfields: Field SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64 UnknownHeaders[:byte-size ((sizeof SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64) * (UINT32) UnknownHeaderCount)]; has comments <>
Bitfields: Field (pointer  SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64(UnknownHeaderCount) (true UINT64)) pUnknownHeaders probe (destination=UnknownHeaderProbe, probe_ptr_as_u64=as_u64_identity, probe_init=SpecializeVLArray.ProbeInit) { (Probe_action_var (probe-fun ___probe_pUnknownHeaders UnknownHeaderCount)) }; has comments <>
Bitfields: Field (pointer  SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64(UnknownHeaderCount) (true UINT64)) pUnknownHeaders probe (destination=UnknownHeaderProbe, probe_ptr_as_u64=as_u64_identity, probe_init=SpecializeVLArray.ProbeInit) { (Probe_action_var (probe-fun SpecializeVLArray.___specialized32____probe_UNKNOWN_HEADERS_INTERNAL_64 UnknownHeaderCount)) }; has comments <>
=============After bitflds=============
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
typedef UINT16 SpecializeVLArray.USHORT;
/*------------------------------------*/
typedef UINT8 SpecializeVLArray.UNINTERPRETED;
/*------------------------------------*/
[aligned] typedef struct SpecializeVLArray._UNKNOWN_HEADER_64 {
SpecializeVLArray.USHORT NameLength;
SpecializeVLArray.USHORT RawValueLength;
(pointer  SpecializeVLArray.UNINTERPRETED (false UINT64)) pName;
(pointer  SpecializeVLArray.UNINTERPRETED (false UINT64)) pRawValue; 
} SpecializeVLArray.UNKNOWN_HEADER_64, *
/*------------------------------------*/
[noextract, aligned] typedef struct SpecializeVLArray.___specialized32__UNKNOWN_HEADER_64 {
SpecializeVLArray.USHORT NameLength;
SpecializeVLArray.USHORT RawValueLength;
UINT32 pName;
UINT32 pRawValue; 
} SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64, *
/*------------------------------------*/
stub probe SpecializeVLArray.___probe_UNKNOWN_HEADER_64() (for SpecializeVLArray.UNKNOWN_HEADER_64 -> SpecializeVLArray.UNKNOWN_HEADER_64)
/*------------------------------------*/
stub probe SpecializeVLArray.___specialized32____probe_UNKNOWN_HEADER_64() (for SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64 -> SpecializeVLArray.UNKNOWN_HEADER_64)
/*------------------------------------*/
typedef struct SpecializeVLArray._UNKNOWN_HEADERS_INTERNAL_64(SpecializeVLArray.USHORT UnknownHeaderCount) {
SpecializeVLArray.UNKNOWN_HEADER_64 UnknownHeaders[:byte-size ((sizeof SpecializeVLArray.UNKNOWN_HEADER_64) * (UINT32) UnknownHeaderCount)]; 
} SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64, *
/*------------------------------------*/
[noextract] typedef struct SpecializeVLArray.___specialized32__UNKNOWN_HEADERS_INTERNAL_64(SpecializeVLArray.USHORT UnknownHeaderCount) {
SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64 UnknownHeaders[:byte-size ((sizeof SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64) * (UINT32) UnknownHeaderCount)]; 
} SpecializeVLArray.___specialized32_UNKNOWN_HEADERS_INTERNAL_64, *
/*------------------------------------*/
stub probe SpecializeVLArray.___probe_UNKNOWN_HEADERS_INTERNAL_64((SpecializeVLArray.USHORT UnknownHeaderCount)) (for SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64 -> SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64)
/*------------------------------------*/
stub probe SpecializeVLArray.___specialized32____probe_UNKNOWN_HEADERS_INTERNAL_64((SpecializeVLArray.USHORT UnknownHeaderCount)) (for SpecializeVLArray.___specialized32_UNKNOWN_HEADERS_INTERNAL_64 -> SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64)
/*------------------------------------*/
typedef struct SpecializeVLArray._UNKNOWN_HEADERS_64<(___probe_pUnknownHeaders : (SpecializeVLArray.USHORT -> probe_m_unit) probe for SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64)>(SpecializeVLArray.USHORT UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
(pointer  SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64(UnknownHeaderCount) (true UINT64)) pUnknownHeaders probe (destination=UnknownHeaderProbe, probe_ptr_as_u64=as_u64_identity, probe_init=SpecializeVLArray.ProbeInit) { (Probe_action_var (probe-fun ___probe_pUnknownHeaders UnknownHeaderCount)) }; 
} SpecializeVLArray.UNKNOWN_HEADERS_64, *
/*------------------------------------*/
typedef struct SpecializeVLArray.___specialized_UNKNOWN_HEADERS_32(SpecializeVLArray.USHORT UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
(pointer  SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64(UnknownHeaderCount) (true UINT64)) pUnknownHeaders probe (destination=UnknownHeaderProbe, probe_ptr_as_u64=as_u64_identity, probe_init=SpecializeVLArray.ProbeInit) { (Probe_action_var (probe-fun SpecializeVLArray.___specialized32____probe_UNKNOWN_HEADERS_INTERNAL_64 UnknownHeaderCount)) }; 
} SpecializeVLArray.UNKNOWN_HEADERS_32, *
/*------------------------------------*/
[entrypoint] casetype SpecializeVLArray._UNKNOWN_HEADERS(Bool Requestor32, SpecializeVLArray.USHORT UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
switch (Requestor32) {

                  case true: SpecializeVLArray.UNKNOWN_HEADERS_32(UnknownHeaderCount, UnknownHeaderProbe) pUnknownHeaders32;;
case false: SpecializeVLArray.UNKNOWN_HEADERS_64<SpecializeVLArray.___probe_UNKNOWN_HEADERS_INTERNAL_64>(UnknownHeaderCount, UnknownHeaderProbe) pUnknownHeaders64;;
} 
} SpecializeVLArray.UNKNOWN_HEADERS, *
***** Size of SpecializeVLArray.USHORT = (Fixed 2)
***** Size of SpecializeVLArray.UNINTERPRETED = (Fixed 1)
Adding padding field in SpecializeVLArray._UNKNOWN_HEADER_64 for 4 bytes at (preceding field (pointer  SpecializeVLArray.UNINTERPRETED (false UINT64)) pName;)
***** Size of SpecializeVLArray._UNKNOWN_HEADER_64 = (Fixed 24)
***** Size of SpecializeVLArray.UNKNOWN_HEADER_64 = (Fixed 24)
***** Size of SpecializeVLArray.___specialized32__UNKNOWN_HEADER_64 = (Fixed 12)
***** Size of SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64 = (Fixed 12)
***** Size of SpecializeVLArray._UNKNOWN_HEADERS_INTERNAL_64 = (WithVariableSuffix 0)
***** Size of SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64 = (WithVariableSuffix 0)
***** Size of SpecializeVLArray.___specialized32__UNKNOWN_HEADERS_INTERNAL_64 = (WithVariableSuffix 0)
***** Size of SpecializeVLArray.___specialized32_UNKNOWN_HEADERS_INTERNAL_64 = (WithVariableSuffix 0)
***** Size of SpecializeVLArray._UNKNOWN_HEADERS_64 = (Fixed 8)
***** Size of SpecializeVLArray.UNKNOWN_HEADERS_64 = (Fixed 8)
***** Size of SpecializeVLArray.___specialized_UNKNOWN_HEADERS_32 = (Fixed 8)
***** Size of SpecializeVLArray.UNKNOWN_HEADERS_32 = (Fixed 8)
***** Size of SpecializeVLArray._UNKNOWN_HEADERS = (Fixed 8)
***** Size of SpecializeVLArray.UNKNOWN_HEADERS = (Fixed 8)
=============Finished typesizes pass=============
Replacing stub ___probe_UNKNOWN_HEADER_64 (from SpecializeVLArray.UNKNOWN_HEADER_64 to SpecializeVLArray.UNKNOWN_HEADER_64)
Replacing stub ___specialized32____probe_UNKNOWN_HEADER_64 (from SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64 to SpecializeVLArray.UNKNOWN_HEADER_64)
Replacing stub ___probe_UNKNOWN_HEADERS_INTERNAL_64 (from SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64 to SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64)
Comparing SpecializeVLArray.UNKNOWN_HEADER_64 -> SpecializeVLArray.UNKNOWN_HEADER_64 to SpecializeVLArray.___specialized32_UNKNOWN_HEADERS_INTERNAL_64 -> SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64
Comparing SpecializeVLArray.UNKNOWN_HEADER_64 -> SpecializeVLArray.UNKNOWN_HEADER_64 to SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64 -> SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64
Comparing SpecializeVLArray.UNKNOWN_HEADER_64 -> SpecializeVLArray.UNKNOWN_HEADER_64 to SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64 -> SpecializeVLArray.UNKNOWN_HEADER_64
Comparing SpecializeVLArray.UNKNOWN_HEADER_64 -> SpecializeVLArray.UNKNOWN_HEADER_64 to SpecializeVLArray.UNKNOWN_HEADER_64 -> SpecializeVLArray.UNKNOWN_HEADER_64
****Instantiating probe function for type SpecializeVLArray.UNKNOWN_HEADER_64 unfolded to SpecializeVLArray.UNKNOWN_HEADER_64 with 
Replacing stub ___specialized32____probe_UNKNOWN_HEADERS_INTERNAL_64 (from SpecializeVLArray.___specialized32_UNKNOWN_HEADERS_INTERNAL_64 to SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64)
Checking for coercion from SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64 to SpecializeVLArray.UNKNOWN_HEADER_64
Comparing SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64 -> SpecializeVLArray.UNKNOWN_HEADER_64 to SpecializeVLArray.___specialized32_UNKNOWN_HEADERS_INTERNAL_64 -> SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64
Comparing SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64 -> SpecializeVLArray.UNKNOWN_HEADER_64 to SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64 -> SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64
Comparing SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64 -> SpecializeVLArray.UNKNOWN_HEADER_64 to SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64 -> SpecializeVLArray.UNKNOWN_HEADER_64
****Instantiating probe function for type SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64 with 
=============After coerce probes =============
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
typedef UINT16 SpecializeVLArray.USHORT;
/*------------------------------------*/
typedef UINT8 SpecializeVLArray.UNINTERPRETED;
/*------------------------------------*/
[aligned] typedef struct SpecializeVLArray._UNKNOWN_HEADER_64 {
SpecializeVLArray.USHORT NameLength;
SpecializeVLArray.USHORT RawValueLength;
UINT8 ___alignment_padding_0[4ul];
(pointer  SpecializeVLArray.UNINTERPRETED (false UINT64)) pName;
(pointer  SpecializeVLArray.UNINTERPRETED (false UINT64)) pRawValue; 
} SpecializeVLArray.UNKNOWN_HEADER_64, *
/*------------------------------------*/
[noextract, aligned] typedef struct SpecializeVLArray.___specialized32__UNKNOWN_HEADER_64 {
SpecializeVLArray.USHORT NameLength;
SpecializeVLArray.USHORT RawValueLength;
UINT32 pName;
UINT32 pRawValue; 
} SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64, *
/*------------------------------------*/
probe copy_bytes((UINT64 numbytes)) (for helper) {
(Probe_action_call SpecializeVLArray.ProbeAndCopy(numbytes)); 
}
/*------------------------------------*/
probe skip_bytes_write((UINT64 numbytes)) (for helper) {
(Probe_action_skip_write numbytes); 
}
/*------------------------------------*/
probe skip_bytes_read((UINT64 numbytes)) (for helper) {
(Probe_action_skip_read numbytes); 
}
/*------------------------------------*/
probe read_and_coerce_pointer((string fieldname)) (for helper) {
(* fieldname *) var ptr32 = (Probe_action_read SpecializeVLArray.ProbeAndReadU32);; (* fieldname *) var ptr64 = (Probe_action_call SpecializeVLArray.UlongToPtr(ptr32));; (Probe_action_write SpecializeVLArray.WriteU64(ptr64)); 
}
/*------------------------------------*/
probe SpecializeVLArray.___probe_UNKNOWN_HEADER_64() (for SpecializeVLArray.UNKNOWN_HEADER_64 -> SpecializeVLArray.UNKNOWN_HEADER_64) {
(* "NameLength" *) (Probe_action_var (probe-fun copy_bytes 24uL)); return (); 
}
/*------------------------------------*/
probe SpecializeVLArray.___specialized32____probe_UNKNOWN_HEADER_64() (for SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64 -> SpecializeVLArray.UNKNOWN_HEADER_64) {
(* "NameLength" *) (Probe_action_var (probe-fun copy_bytes 4uL)); (* "alignment" *) (Probe_action_var (probe-fun skip_bytes_write 4uL)); (* "pName" *) (Probe_action_var (probe-fun read_and_coerce_pointer "pName")); (* "pRawValue" *) (Probe_action_var (probe-fun read_and_coerce_pointer "pRawValue")); return (); 
}
/*------------------------------------*/
typedef struct SpecializeVLArray._UNKNOWN_HEADERS_INTERNAL_64(SpecializeVLArray.USHORT UnknownHeaderCount) {
SpecializeVLArray.UNKNOWN_HEADER_64 UnknownHeaders[:byte-size ((sizeof SpecializeVLArray.UNKNOWN_HEADER_64) * (UINT32) UnknownHeaderCount)]; 
} SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64, *
/*------------------------------------*/
[noextract] typedef struct SpecializeVLArray.___specialized32__UNKNOWN_HEADERS_INTERNAL_64(SpecializeVLArray.USHORT UnknownHeaderCount) {
SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64 UnknownHeaders[:byte-size ((sizeof SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64) * (UINT32) UnknownHeaderCount)]; 
} SpecializeVLArray.___specialized32_UNKNOWN_HEADERS_INTERNAL_64, *
/*------------------------------------*/
probe SpecializeVLArray.___probe_UNKNOWN_HEADERS_INTERNAL_64((SpecializeVLArray.USHORT UnknownHeaderCount)) (for SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64 -> SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64) {
array(((sizeof SpecializeVLArray.UNKNOWN_HEADER_64) * (UINT32) UnknownHeaderCount), (* "UnknownHeaders" *) (Probe_action_var SpecializeVLArray.___probe_UNKNOWN_HEADER_64); return ();) 
}
/*------------------------------------*/
probe SpecializeVLArray.___specialized32____probe_UNKNOWN_HEADERS_INTERNAL_64((SpecializeVLArray.USHORT UnknownHeaderCount)) (for SpecializeVLArray.___specialized32_UNKNOWN_HEADERS_INTERNAL_64 -> SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64) {
array(((sizeof SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64) * (UINT32) UnknownHeaderCount), (* "UnknownHeaders" *) (Probe_action_var SpecializeVLArray.___specialized32____probe_UNKNOWN_HEADER_64); return ();) 
}
/*------------------------------------*/
typedef struct SpecializeVLArray._UNKNOWN_HEADERS_64<(___probe_pUnknownHeaders : (SpecializeVLArray.USHORT -> probe_m_unit) probe for SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64)>(SpecializeVLArray.USHORT UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
(pointer  SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64(UnknownHeaderCount) (true UINT64)) pUnknownHeaders probe (destination=UnknownHeaderProbe, probe_ptr_as_u64=as_u64_identity, probe_init=SpecializeVLArray.ProbeInit) { (Probe_action_var (probe-fun ___probe_pUnknownHeaders UnknownHeaderCount)) }; 
} SpecializeVLArray.UNKNOWN_HEADERS_64, *
/*------------------------------------*/
typedef struct SpecializeVLArray.___specialized_UNKNOWN_HEADERS_32(SpecializeVLArray.USHORT UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
(pointer  SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64(UnknownHeaderCount) (true UINT64)) pUnknownHeaders probe (destination=UnknownHeaderProbe, probe_ptr_as_u64=as_u64_identity, probe_init=SpecializeVLArray.ProbeInit) { (Probe_action_var (probe-fun SpecializeVLArray.___specialized32____probe_UNKNOWN_HEADERS_INTERNAL_64 UnknownHeaderCount)) }; 
} SpecializeVLArray.UNKNOWN_HEADERS_32, *
/*------------------------------------*/
[entrypoint] casetype SpecializeVLArray._UNKNOWN_HEADERS(Bool Requestor32, SpecializeVLArray.USHORT UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
switch (Requestor32) {

                  case true: SpecializeVLArray.UNKNOWN_HEADERS_32(UnknownHeaderCount, UnknownHeaderProbe) pUnknownHeaders32;;
case false: SpecializeVLArray.UNKNOWN_HEADERS_64<SpecializeVLArray.___probe_UNKNOWN_HEADERS_INTERNAL_64>(UnknownHeaderCount, UnknownHeaderProbe) pUnknownHeaders64;;
} 
} SpecializeVLArray.UNKNOWN_HEADERS, *
=============After simplify============
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
typedef UINT16 SpecializeVLArray.USHORT;
/*------------------------------------*/
typedef UINT8 SpecializeVLArray.UNINTERPRETED;
/*------------------------------------*/
[aligned] typedef struct SpecializeVLArray._UNKNOWN_HEADER_64 {
UINT16 NameLength;
UINT16 RawValueLength;
UINT8 ___alignment_padding_0[4ul];
(pointer  UINT8 (false UINT64)) pName;
(pointer  UINT8 (false UINT64)) pRawValue; 
} SpecializeVLArray.UNKNOWN_HEADER_64, *
/*------------------------------------*/
[noextract, aligned] typedef struct SpecializeVLArray.___specialized32__UNKNOWN_HEADER_64 {
UINT16 NameLength;
UINT16 RawValueLength;
UINT32 pName;
UINT32 pRawValue; 
} SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64, *
/*------------------------------------*/
probe copy_bytes((UINT64 numbytes)) (for helper) {
(Probe_action_copy SpecializeVLArray.ProbeAndCopy(numbytes)); 
}
/*------------------------------------*/
probe skip_bytes_write((UINT64 numbytes)) (for helper) {
(Probe_action_skip_write numbytes); 
}
/*------------------------------------*/
probe skip_bytes_read((UINT64 numbytes)) (for helper) {
(Probe_action_skip_read numbytes); 
}
/*------------------------------------*/
probe read_and_coerce_pointer((string fieldname)) (for helper) {
(* fieldname *) var ptr32 = (Probe_action_read SpecializeVLArray.ProbeAndReadU32);; (* fieldname *) var ptr64 = (Probe_action_call SpecializeVLArray.UlongToPtr(ptr32));; (Probe_action_write SpecializeVLArray.WriteU64(ptr64)); 
}
/*------------------------------------*/
probe SpecializeVLArray.___probe_UNKNOWN_HEADER_64() (for SpecializeVLArray.UNKNOWN_HEADER_64 -> SpecializeVLArray.UNKNOWN_HEADER_64) {
(* "NameLength" *) (Probe_action_var (probe-fun copy_bytes 24uL)); return (); 
}
/*------------------------------------*/
probe SpecializeVLArray.___specialized32____probe_UNKNOWN_HEADER_64() (for SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64 -> SpecializeVLArray.UNKNOWN_HEADER_64) {
(* "NameLength" *) (Probe_action_var (probe-fun copy_bytes 4uL)); (* "alignment" *) (Probe_action_var (probe-fun skip_bytes_write 4uL)); (* "pName" *) (Probe_action_var (probe-fun read_and_coerce_pointer "pName")); (* "pRawValue" *) (Probe_action_var (probe-fun read_and_coerce_pointer "pRawValue")); return (); 
}
/*------------------------------------*/
typedef struct SpecializeVLArray._UNKNOWN_HEADERS_INTERNAL_64(UINT16 UnknownHeaderCount) {
SpecializeVLArray._UNKNOWN_HEADER_64 UnknownHeaders[:byte-size (24ul * (UINT32) UnknownHeaderCount)]; 
} SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64, *
/*------------------------------------*/
[noextract] typedef struct SpecializeVLArray.___specialized32__UNKNOWN_HEADERS_INTERNAL_64(UINT16 UnknownHeaderCount) {
SpecializeVLArray.___specialized32__UNKNOWN_HEADER_64 UnknownHeaders[:byte-size (12ul * (UINT32) UnknownHeaderCount)]; 
} SpecializeVLArray.___specialized32_UNKNOWN_HEADERS_INTERNAL_64, *
/*------------------------------------*/
probe SpecializeVLArray.___probe_UNKNOWN_HEADERS_INTERNAL_64((UINT16 UnknownHeaderCount)) (for SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64 -> SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64) {
array((UINT64) (24ul * (UINT32) UnknownHeaderCount), (* "UnknownHeaders" *) (Probe_action_var SpecializeVLArray.___probe_UNKNOWN_HEADER_64); return ();) 
}
/*------------------------------------*/
probe SpecializeVLArray.___specialized32____probe_UNKNOWN_HEADERS_INTERNAL_64((UINT16 UnknownHeaderCount)) (for SpecializeVLArray.___specialized32_UNKNOWN_HEADERS_INTERNAL_64 -> SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64) {
array((UINT64) (12ul * (UINT32) UnknownHeaderCount), (* "UnknownHeaders" *) (Probe_action_var SpecializeVLArray.___specialized32____probe_UNKNOWN_HEADER_64); return ();) 
}
/*------------------------------------*/
typedef struct SpecializeVLArray._UNKNOWN_HEADERS_64<(___probe_pUnknownHeaders : (UINT16 -> probe_m_unit) probe for SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64)>(UINT16 UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
(pointer  SpecializeVLArray._UNKNOWN_HEADERS_INTERNAL_64(UnknownHeaderCount) (true UINT64)) pUnknownHeaders probe (destination=UnknownHeaderProbe, probe_ptr_as_u64=as_u64_identity, probe_init=SpecializeVLArray.ProbeInit) { (Probe_action_var (probe-fun ___probe_pUnknownHeaders UnknownHeaderCount)) }; 
} SpecializeVLArray.UNKNOWN_HEADERS_64, *
/*------------------------------------*/
typedef struct SpecializeVLArray.___specialized_UNKNOWN_HEADERS_32(UINT16 UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
(pointer  SpecializeVLArray._UNKNOWN_HEADERS_INTERNAL_64(UnknownHeaderCount) (true UINT64)) pUnknownHeaders probe (destination=UnknownHeaderProbe, probe_ptr_as_u64=as_u64_identity, probe_init=SpecializeVLArray.ProbeInit) { (Probe_action_var (probe-fun SpecializeVLArray.___specialized32____probe_UNKNOWN_HEADERS_INTERNAL_64 UnknownHeaderCount)) }; 
} SpecializeVLArray.UNKNOWN_HEADERS_32, *
/*------------------------------------*/
[entrypoint] casetype SpecializeVLArray._UNKNOWN_HEADERS(Bool Requestor32, UINT16 UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
switch (Requestor32) {

                  case true: SpecializeVLArray.___specialized_UNKNOWN_HEADERS_32(UnknownHeaderCount, UnknownHeaderProbe) pUnknownHeaders32;;
case false: SpecializeVLArray._UNKNOWN_HEADERS_64<SpecializeVLArray.___probe_UNKNOWN_HEADERS_INTERNAL_64>(UnknownHeaderCount, UnknownHeaderProbe) pUnknownHeaders64;;
} 
} SpecializeVLArray.UNKNOWN_HEADERS, *
=============After inline singletons============
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
Printing for extern functions is TBD
/*------------------------------------*/
typedef UINT16 SpecializeVLArray.USHORT;
/*------------------------------------*/
typedef UINT8 SpecializeVLArray.UNINTERPRETED;
/*------------------------------------*/
[aligned] typedef struct SpecializeVLArray._UNKNOWN_HEADER_64 {
UINT16 NameLength;
UINT16 RawValueLength;
UINT8 ___alignment_padding_0[4ul];
(pointer  UINT8 (false UINT64)) pName;
(pointer  UINT8 (false UINT64)) pRawValue; 
} SpecializeVLArray.UNKNOWN_HEADER_64, *
/*------------------------------------*/
[noextract, aligned] typedef struct SpecializeVLArray.___specialized32__UNKNOWN_HEADER_64 {
UINT16 NameLength;
UINT16 RawValueLength;
UINT32 pName;
UINT32 pRawValue; 
} SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64, *
/*------------------------------------*/
probe copy_bytes((UINT64 numbytes)) (for helper) {
(Probe_action_copy SpecializeVLArray.ProbeAndCopy(numbytes)); 
}
/*------------------------------------*/
probe skip_bytes_write((UINT64 numbytes)) (for helper) {
(Probe_action_skip_write numbytes); 
}
/*------------------------------------*/
probe skip_bytes_read((UINT64 numbytes)) (for helper) {
(Probe_action_skip_read numbytes); 
}
/*------------------------------------*/
probe read_and_coerce_pointer((string fieldname)) (for helper) {
(* fieldname *) var ptr32 = (Probe_action_read SpecializeVLArray.ProbeAndReadU32);; (* fieldname *) var ptr64 = (Probe_action_call SpecializeVLArray.UlongToPtr(ptr32));; (Probe_action_write SpecializeVLArray.WriteU64(ptr64)); 
}
/*------------------------------------*/
probe SpecializeVLArray.___probe_UNKNOWN_HEADER_64() (for SpecializeVLArray.UNKNOWN_HEADER_64 -> SpecializeVLArray.UNKNOWN_HEADER_64) {
(* "NameLength" *) (Probe_action_var (probe-fun copy_bytes 24uL)); return (); 
}
/*------------------------------------*/
probe SpecializeVLArray.___specialized32____probe_UNKNOWN_HEADER_64() (for SpecializeVLArray.___specialized32_UNKNOWN_HEADER_64 -> SpecializeVLArray.UNKNOWN_HEADER_64) {
(* "NameLength" *) (Probe_action_var (probe-fun copy_bytes 4uL)); (* "alignment" *) (Probe_action_var (probe-fun skip_bytes_write 4uL)); (* "pName" *) (Probe_action_var (probe-fun read_and_coerce_pointer "pName")); (* "pRawValue" *) (Probe_action_var (probe-fun read_and_coerce_pointer "pRawValue")); return (); 
}
/*------------------------------------*/
typedef struct SpecializeVLArray._UNKNOWN_HEADERS_INTERNAL_64(UINT16 UnknownHeaderCount) {
SpecializeVLArray._UNKNOWN_HEADER_64 UnknownHeaders[:byte-size (24ul * (UINT32) UnknownHeaderCount)]; 
} SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64, *
/*------------------------------------*/
[noextract] typedef struct SpecializeVLArray.___specialized32__UNKNOWN_HEADERS_INTERNAL_64(UINT16 UnknownHeaderCount) {
SpecializeVLArray.___specialized32__UNKNOWN_HEADER_64 UnknownHeaders[:byte-size (12ul * (UINT32) UnknownHeaderCount)]; 
} SpecializeVLArray.___specialized32_UNKNOWN_HEADERS_INTERNAL_64, *
/*------------------------------------*/
probe SpecializeVLArray.___probe_UNKNOWN_HEADERS_INTERNAL_64((UINT16 UnknownHeaderCount)) (for SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64 -> SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64) {
array((UINT64) (24ul * (UINT32) UnknownHeaderCount), (* "UnknownHeaders" *) (Probe_action_var SpecializeVLArray.___probe_UNKNOWN_HEADER_64); return ();) 
}
/*------------------------------------*/
probe SpecializeVLArray.___specialized32____probe_UNKNOWN_HEADERS_INTERNAL_64((UINT16 UnknownHeaderCount)) (for SpecializeVLArray.___specialized32_UNKNOWN_HEADERS_INTERNAL_64 -> SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64) {
array((UINT64) (12ul * (UINT32) UnknownHeaderCount), (* "UnknownHeaders" *) (Probe_action_var SpecializeVLArray.___specialized32____probe_UNKNOWN_HEADER_64); return ();) 
}
/*------------------------------------*/
typedef struct SpecializeVLArray._UNKNOWN_HEADERS_64<(___probe_pUnknownHeaders : (UINT16 -> probe_m_unit) probe for SpecializeVLArray.UNKNOWN_HEADERS_INTERNAL_64)>(UINT16 UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
(pointer  SpecializeVLArray._UNKNOWN_HEADERS_INTERNAL_64(UnknownHeaderCount) (true UINT64)) pUnknownHeaders probe (destination=UnknownHeaderProbe, probe_ptr_as_u64=as_u64_identity, probe_init=SpecializeVLArray.ProbeInit) { (Probe_action_var (probe-fun ___probe_pUnknownHeaders UnknownHeaderCount)) }; 
} SpecializeVLArray.UNKNOWN_HEADERS_64, *
/*------------------------------------*/
typedef struct SpecializeVLArray.___specialized_UNKNOWN_HEADERS_32(UINT16 UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
(pointer  SpecializeVLArray._UNKNOWN_HEADERS_INTERNAL_64(UnknownHeaderCount) (true UINT64)) pUnknownHeaders probe (destination=UnknownHeaderProbe, probe_ptr_as_u64=as_u64_identity, probe_init=SpecializeVLArray.ProbeInit) { (Probe_action_var (probe-fun SpecializeVLArray.___specialized32____probe_UNKNOWN_HEADERS_INTERNAL_64 UnknownHeaderCount)) }; 
} SpecializeVLArray.UNKNOWN_HEADERS_32, *
/*------------------------------------*/
[entrypoint] casetype SpecializeVLArray._UNKNOWN_HEADERS(Bool Requestor32, UINT16 UnknownHeaderCount, EVERPARSE_COPY_BUFFER_T UnknownHeaderProbe) {
switch (Requestor32) {

                  case true: SpecializeVLArray.___specialized_UNKNOWN_HEADERS_32(UnknownHeaderCount, UnknownHeaderProbe) pUnknownHeaders32;;
case false: SpecializeVLArray._UNKNOWN_HEADERS_64<SpecializeVLArray.___probe_UNKNOWN_HEADERS_INTERNAL_64>(UnknownHeaderCount, UnknownHeaderProbe) pUnknownHeaders64;;
} 
} SpecializeVLArray.UNKNOWN_HEADERS, *
Refining records
=============After refining records =============
=============Finished static asserts pass=============
For SpecializeVLArray.USHORT, adding parser kind true
For SpecializeVLArray.UNINTERPRETED, adding parser kind true
For SpecializeVLArray._UNKNOWN_HEADER_64, adding parser kind true
For SpecializeVLArray._UNKNOWN_HEADERS_INTERNAL_64, adding parser kind false
For SpecializeVLArray._UNKNOWN_HEADERS_64, adding parser kind true
For SpecializeVLArray.___specialized_UNKNOWN_HEADERS_32, adding parser kind true
For SpecializeVLArray._UNKNOWN_HEADERS, adding parser kind true
Writing file out/SpecializeVLArray.ExternalAPI.fsti
Writing file out/SpecializeVLArray.fst
Writing file out/SpecializeVLArray.fsti
Writing file out/SpecializeVLArrayWrapper.c
Writing file out/SpecializeVLArrayWrapper.h
Writing file out/SpecializeVLArrayStaticAssertions.c
Running: fstar.exe --print_in_place --odir out --cache_dir out --include /home/nswamy/workspace/everest/everparse/src/3d/prelude/buffer --include out --already_cached Prims,LowStar,FStar,LowParse,C,EverParse3d.\*,Spec --include /home/nswamy/workspace/everest/everparse/src/lowparse --include /home/nswamy/workspace/everest/karamel/krmllib --include /home/nswamy/workspace/everest/karamel/krmllib/obj --include /home/nswamy/workspace/everest/everparse/src/3d/prelude --cmi --warn_error +241 out/SpecializeVLArray.ExternalAPI.fsti
Running: fstar.exe --print_in_place --odir out --cache_dir out --include /home/nswamy/workspace/everest/everparse/src/3d/prelude/buffer --include out --already_cached Prims,LowStar,FStar,LowParse,C,EverParse3d.\*,Spec --include /home/nswamy/workspace/everest/everparse/src/lowparse --include /home/nswamy/workspace/everest/karamel/krmllib --include /home/nswamy/workspace/everest/karamel/krmllib/obj --include /home/nswamy/workspace/everest/everparse/src/3d/prelude --cmi --warn_error +241 out/SpecializeVLArray.fsti
Running: fstar.exe --print_in_place --odir out --cache_dir out --include /home/nswamy/workspace/everest/everparse/src/3d/prelude/buffer --include out --already_cached Prims,LowStar,FStar,LowParse,C,EverParse3d.\*,Spec --include /home/nswamy/workspace/everest/everparse/src/lowparse --include /home/nswamy/workspace/everest/karamel/krmllib --include /home/nswamy/workspace/everest/karamel/krmllib/obj --include /home/nswamy/workspace/everest/everparse/src/3d/prelude --cmi --warn_error +241 out/SpecializeVLArray.fst
Running: fstar.exe --cache_checked_modules --odir out --cache_dir out --include /home/nswamy/workspace/everest/everparse/src/3d/prelude/buffer --include out --already_cached Prims,LowStar,FStar,LowParse,C,EverParse3d.\*,Spec --include /home/nswamy/workspace/everest/everparse/src/lowparse --include /home/nswamy/workspace/everest/karamel/krmllib --include /home/nswamy/workspace/everest/karamel/krmllib/obj --include /home/nswamy/workspace/everest/everparse/src/3d/prelude --cmi --warn_error +241 out/SpecializeVLArray.ExternalAPI.fsti
Verified i'face (or impl+i'face): SpecializeVLArray.ExternalAPI
All verification conditions discharged successfully

Running: fstar.exe --cache_checked_modules --odir out --cache_dir out --include /home/nswamy/workspace/everest/everparse/src/3d/prelude/buffer --include out --already_cached Prims,LowStar,FStar,LowParse,C,EverParse3d.\*,Spec --include /home/nswamy/workspace/everest/everparse/src/lowparse --include /home/nswamy/workspace/everest/karamel/krmllib --include /home/nswamy/workspace/everest/karamel/krmllib/obj --include /home/nswamy/workspace/everest/everparse/src/3d/prelude --cmi --warn_error +241 out/SpecializeVLArray.fsti
Verified i'face (or impl+i'face): SpecializeVLArray
All verification conditions discharged successfully

Running: fstar.exe --cache_checked_modules --odir out --cache_dir out --include /home/nswamy/workspace/everest/everparse/src/3d/prelude/buffer --include out --already_cached Prims,LowStar,FStar,LowParse,C,EverParse3d.\*,Spec --include /home/nswamy/workspace/everest/everparse/src/lowparse --include /home/nswamy/workspace/everest/karamel/krmllib --include /home/nswamy/workspace/everest/karamel/krmllib/obj --include /home/nswamy/workspace/everest/everparse/src/3d/prelude --cmi --warn_error +241 out/SpecializeVLArray.fst
Verified module: SpecializeVLArray
All verification conditions discharged successfully

Running: fstar.exe --extract_module SpecializeVLArray.ExternalAPI --codegen krml --odir out --cache_dir out --include /home/nswamy/workspace/everest/everparse/src/3d/prelude/buffer --include out --already_cached Prims,LowStar,FStar,LowParse,C,EverParse3d.\*,Spec --include /home/nswamy/workspace/everest/everparse/src/lowparse --include /home/nswamy/workspace/everest/karamel/krmllib --include /home/nswamy/workspace/everest/karamel/krmllib/obj --include /home/nswamy/workspace/everest/everparse/src/3d/prelude --cmi --warn_error +241 out/SpecializeVLArray.ExternalAPI.fsti
Extracted module SpecializeVLArray.ExternalAPI
Attempting to translate module SpecializeVLArray.ExternalAPI
Verified i'face (or impl+i'face): SpecializeVLArray.ExternalAPI
All verification conditions discharged successfully

Running: fstar.exe --extract_module SpecializeVLArray --codegen krml --odir out --cache_dir out --include /home/nswamy/workspace/everest/everparse/src/3d/prelude/buffer --include out --already_cached Prims,LowStar,FStar,LowParse,C,EverParse3d.\*,Spec --include /home/nswamy/workspace/everest/everparse/src/lowparse --include /home/nswamy/workspace/everest/karamel/krmllib --include /home/nswamy/workspace/everest/karamel/krmllib/obj --include /home/nswamy/workspace/everest/everparse/src/3d/prelude --cmi --warn_error +241 out/SpecializeVLArray.fst
Extracted module SpecializeVLArray
Attempting to translate module SpecializeVLArray
Verified module: SpecializeVLArray
All verification conditions discharged successfully

KaRaMeL found at: /home/nswamy/workspace/everest/karamel/krml
Running: /home/nswamy/workspace/everest/karamel/krml @out/krmlargs7b4bed.rsp
[38;5;119m✔[0m [Monomorphization] ⏱️ 45ms
[38;5;119m✔[0m [Inlining] ⏱️ 8ms
[38;5;119m✔[0m [Pattern matches compilation] ⏱️ 8ms
[38;5;119m✔[0m [Structs + Simplify 2] ⏱️ 14ms
[38;5;119m✔[0m [Drop] ⏱️ <1ms
[38;5;119m✔[0m [AstToCStar] ⏱️ 3ms
[38;5;119m✔[0m [CStarToC] ⏱️ <1ms
[38;5;81m⚙ KaRaMeL auto-detecting tools.[0m Here's what we found:
[4mreadlink is:[0m readlink
[4mKaRaMeL called via:[0m /home/nswamy/workspace/everest/karamel/krml
[4mKaRaMeL home is:[0m /home/nswamy/workspace/everest/karamel
[38;5;119m✔[0m [PrettyPrinting] ⏱️ 5ms
KaRaMeL: wrote out .c files for SpecializeVLArray
KaRaMeL: wrote out .h files for SpecializeVLArray_ExternalAPI, SpecializeVLArray

Adding copyright to out/EverParse.h from /home/nswamy/workspace/everest/everparse/src/3d/copyright.txt
EverParse succeeded!

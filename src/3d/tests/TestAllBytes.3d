entrypoint
typedef struct _test1 {
  UINT32 a;
  UINT16 b;
  UINT8 c;
  UINT8 remainder[:consume-all];
} test1;

entrypoint
typedef struct _test2 {
  UINT32BE a;
  UINT16BE b;
  UINT8BE c;
  UINT8BE remainder[:consume-all];
} test2;

entrypoint
typedef struct _test3 {
  UINT32 size1;
  test1 mytest1[:byte-size-single-element-array size1];
  test1 mytest1_at_most[:byte-size-single-element-array-at-most size1];
  test1 mytest1_array[:byte-size size1]; // in practice, this array will only have one element (or zero, if size1 == 0); 
  UINT32 size2;
  test2 mytest2[:byte-size-single-element-array size2];
  test2 mytest2_at_most[:byte-size-single-element-array-at-most size2];
  test2 mytest2_array[:byte-size size2]; // in practice, this array will only have one element (or zero, if size2 == 0); 
  UINT16 something_else;
} test3;

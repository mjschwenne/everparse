name: CI
on:
  push:
    branches-ignore:
    - _**
  pull_request:
  merge_group:
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  ci:
    runs-on: ubuntu-latest
    container: mtzguido/dev-base
    steps:
      - name: Cleanup
        run: sudo find . -delete

      - run: echo "HOME=/home/user" | sudo tee -a $GITHUB_ENV
      - uses: mtzguido/set-opam-env@master
      - run: opam install -y hex re ctypes sha sexplib
      - run: sudo apt update && sudo apt install -y cmake
      # ^ not in base

      - uses: actions/checkout@master

      - name: Checkout submodules
        run: |
          git submodule init
          git submodule update --depth 1

      - name: Read commit hashes for submodules
        id: hashes
        run: |
          H=$(git -C opt/FStar rev-parse HEAD)
          echo "FSTAR_COMMIT=$H" >> "$GITHUB_OUTPUT"
          H=$(git -C opt/karamel rev-parse HEAD)
          echo "KARAMEL_COMMIT=$H" >> "$GITHUB_OUTPUT"
          H=$(git -C opt/pulse rev-parse HEAD)
          echo "PULSE_COMMIT=$H" >> "$GITHUB_OUTPUT"

      - name: Try fetch built F*
        id: cache-fstar
        uses: actions/cache/restore@v4
        with:
          path: opt/FStar
          key: FStar-${{ runner.os }}-${{ runner.arch }}-${{ steps.hashes.outputs.FSTAR_COMMIT }}

      - name: Build F*
        if: steps.cache-fstar.outputs.cache-hit != 'true'
        run: |
          make -C opt FStar -sj$(nproc)

      - name: Save built F*
        if: steps.cache-fstar.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: opt/FStar
          key: FStar-${{ runner.os }}-${{ runner.arch }}-${{ steps.hashes.outputs.FSTAR_COMMIT }}

      - name: Try fetch built karamel
        id: cache-karamel
        uses: actions/cache/restore@v4
        with:
          path: opt/karamel
          key: karamel-${{ runner.os }}-${{ runner.arch }}-${{ steps.hashes.outputs.FSTAR_COMMIT }}-${{ steps.hashes.outputs.KARAMEL_COMMIT }}

      - name: Build karamel (if not cached)
        if: steps.cache-karamel.outputs.cache-hit != 'true'
        run: |
          make -C opt karamel -sj$(nproc)

      - name: Save built karamel
        if: steps.cache-karamel.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: opt/karamel
          key: karamel-${{ runner.os }}-${{ runner.arch }}-${{ steps.hashes.outputs.FSTAR_COMMIT }}-${{ steps.hashes.outputs.KARAMEL_COMMIT }}

      - run: echo "KRML_HOME=$(pwd)/karamel" | sudo tee -a $GITHUB_ENV
      - run: echo "KRML_EXE=$(pwd)/karamel/krml" | sudo tee -a $GITHUB_ENV
      - run: echo "$(pwd)/karamel" | sudo tee -a $GITHUB_PATH

      - name: Install python3-venv
        run: |
          sudo apt-get update
          sudo apt-get --yes install --no-install-recommends python3-venv

      - name: Try fetch built pulse
        id: cache-pulse
        uses: actions/cache/restore@v4
        with:
          path: opt/pulse
          key: pulse-${{ runner.os }}-${{ runner.arch }}-${{ steps.hashes.outputs.FSTAR_COMMIT }}-${{ steps.hashes.outputs.PULSE_COMMIT }}

      - name: Build pulse (if not cached)
        if: steps.cache-pulse.outputs.cache-hit != 'true'
        run: |
          make -C opt pulse -sj$(nproc)

      - name: Save built pulse
        if: steps.cache-pulse.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: opt/pulse
          key: pulse-${{ runner.os }}-${{ runner.arch }}-${{ steps.hashes.outputs.FSTAR_COMMIT }}-${{ steps.hashes.outputs.PULSE_COMMIT }}

      - name: Everparse CI
        id: cistep
        run: |
          make -C everparse ci -skj$(nproc) branchname=${{ github.head_ref || github.ref_nam        env:
          DZOMO_GITHUB_TOKEN: ${{ secrets.DZOMO_GITHUB_TOKEN }}

      # I'm leaving this disabled as I do not get good incrementality
      # when trying this out by hand due to dependence hash mismatches
      # everywhere.
      - name: Incrementality test
        if: false
        working-directory: everparse/tests/sample
        run: |
            echo 'let foo : FStar.UInt32.t = 42ul' >> Data.fsti
            echo 'let foo : FStar.UInt32.t = Data.foo' >> Test.fst
            make -j$(nproc)
            git checkout Test.fst
            sed -i 's!payloads!payload!g' Test.rfc
            make -j$(nproc)
            git checkout Test.rfc

      - name: Calculate Time
        if: ${{ always () }}
        id: duration
        uses: RockyIsHere/actions-calculate-log-time@v0.2.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Post result to Zulip
        if: ${{ always () }} # && secrets.ZULIP_API_KEY != '' }}
        continue-on-error: true
        uses: zulip/github-actions-zulip/send-message@v1
        with:
          api-key: ${{ secrets.ZULIP_API_KEY }}
          email: "github-commits-bot@fstar.zulipchat.com"
          organization-url: "https://fstar.zulipchat.com"
          to: "everparse-ci"
          type: "stream"
          topic: "CI on '${{github.ref_name}}'"
          content: |
            '${{ github.event.head_commit.message || github.event.pull_request.title || github.head_commit.message }}' by ${{ github.event.head_commit.author.username || github.event.pull_request.user.login || github.head_commit.author.username }} (commit [${{github.sha}}](${{ github.event.head_commit.url || github.even.pull_request.html_url}}))
            Status: ${{ steps.cistep.outcome == 'success' && '✅' || steps.cistep.outcome == 'cancelled' && '⚠' || '❌' }} ([link](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}))
            Elapsed time: ${{ steps.duration.outputs.duration }}

  # Branch protection points here.
  ciok:
    runs-on: ubuntu-latest
    needs: ci
    if: ${{ cancelled() || contains(needs.*.result, 'cancelled') || contains(needs.*.result, 'failure') }}
    steps:
      # Note: we only run on failure. Otherwise this is skipped, which counts
      # as a success.
      - run: exit 1
